// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Products.Data.EF.Migrations.Context;

namespace Products.Data.EF.Migrations.Migrations
{
    [DbContext(typeof(ProductsDbContext))]
    partial class ProductsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Products.Domain.DataModels.Address.AddressBase", b =>
                {
                    b.Property<int>("AddressTypeBaseId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationBaseId")
                        .HasColumnType("int");

                    b.Property<int?>("EntityBaseId")
                        .HasColumnType("int");

                    b.Property<string>("AddressL1")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("AddressL2")
                        .IsRequired()
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("AddressL3")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("AddressL4")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("AddressL5")
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("AddressL6")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("AddressL7")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80);

                    b.Property<int>("AddressStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("AddressTypeBaseId", "OrganizationBaseId", "EntityBaseId");

                    b.HasIndex("EntityBaseId");

                    b.HasIndex("OrganizationBaseId");

                    b.ToTable("AddressBase");
                });

            modelBuilder.Entity("Products.Domain.DataModels.Address.AddressTypeBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("AddressTypeBase");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressType = "Billing Address",
                            DateCreated = new DateTime(2020, 10, 11, 17, 38, 5, 150, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AddressType = "Deliver Address",
                            DateCreated = new DateTime(2020, 10, 11, 17, 38, 15, 463, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AddressType = "Office Address",
                            DateCreated = new DateTime(2020, 10, 11, 17, 38, 25, 680, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AddressType = "Shipping Address",
                            DateCreated = new DateTime(2020, 10, 11, 17, 38, 37, 320, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Products.Domain.DataModels.Customer.CustomerBase", b =>
                {
                    b.Property<int>("OrganizationBaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("CustomerKeyContact")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CustomerMobile")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CustomerWeb")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationBaseId1")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("OrganizationBaseId");

                    b.HasIndex("OrganizationBaseId1");

                    b.ToTable("CustomerBase");
                });

            modelBuilder.Entity("Products.Domain.DataModels.EntityBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("EntityDescription")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SystemAdminId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EntityBase");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2020, 10, 11, 14, 52, 26, 697, DateTimeKind.Unspecified),
                            Entity = "Organization",
                            EntityDescription = "Organization Details",
                            EntityName = "OrganizationBase",
                            EntityStatus = "Active",
                            EntityType = "Table",
                            SystemAdminId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2020, 10, 11, 14, 52, 26, 697, DateTimeKind.Unspecified),
                            Entity = "Customer",
                            EntityDescription = "Customer Details",
                            EntityName = "CustomerBase",
                            EntityStatus = "Active",
                            EntityType = "Table",
                            SystemAdminId = 1
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2020, 10, 11, 14, 52, 26, 697, DateTimeKind.Unspecified),
                            Entity = "User",
                            EntityDescription = "User Details",
                            EntityName = "UserBase",
                            EntityStatus = "Active",
                            EntityType = "Table",
                            SystemAdminId = 1
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2020, 10, 11, 14, 52, 26, 697, DateTimeKind.Unspecified),
                            Entity = "Product",
                            EntityDescription = "Product Details",
                            EntityName = "ProductBase",
                            EntityStatus = "Active",
                            EntityType = "Table",
                            SystemAdminId = 1
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2020, 10, 11, 14, 52, 26, 697, DateTimeKind.Unspecified),
                            Entity = "Product Category",
                            EntityDescription = "Product Category Details",
                            EntityName = "ProductCategoryBase",
                            EntityStatus = "Active",
                            EntityType = "Table",
                            SystemAdminId = 1
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2020, 10, 11, 14, 52, 26, 697, DateTimeKind.Unspecified),
                            Entity = "Product SubCategory",
                            EntityDescription = "Product SubCategory Details",
                            EntityName = "ProductSubCategoryBase",
                            EntityStatus = "Active",
                            EntityType = "Table",
                            SystemAdminId = 1
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2020, 10, 11, 14, 52, 26, 697, DateTimeKind.Unspecified),
                            Entity = "SalesOrder",
                            EntityDescription = "Sales  Order Header Details",
                            EntityName = "SalesOrderBase",
                            EntityStatus = "Active",
                            EntityType = "Table",
                            SystemAdminId = 1
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2020, 10, 11, 14, 52, 26, 697, DateTimeKind.Unspecified),
                            Entity = "SalesOrderProduct",
                            EntityDescription = "Sales Order Product line  Details",
                            EntityName = "SalesOrderProductBase",
                            EntityStatus = "Active",
                            EntityType = "Table",
                            SystemAdminId = 1
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2020, 10, 11, 14, 52, 26, 697, DateTimeKind.Unspecified),
                            Entity = "Address",
                            EntityDescription = "Address Details",
                            EntityName = "AddressBase",
                            EntityStatus = "Active",
                            EntityType = "Table",
                            SystemAdminId = 1
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2020, 10, 11, 14, 52, 26, 697, DateTimeKind.Unspecified),
                            Entity = "AddressType",
                            EntityDescription = "Address Type Details",
                            EntityName = "AddressTypeBase",
                            EntityStatus = "Active",
                            EntityType = "Table",
                            SystemAdminId = 1
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2020, 10, 11, 14, 52, 26, 697, DateTimeKind.Unspecified),
                            Entity = "SalesOrderStatus",
                            EntityDescription = "Sales Order Status Codes",
                            EntityName = "SalesOrderStatusBase",
                            EntityStatus = "Active",
                            EntityType = "Table",
                            SystemAdminId = 1
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2020, 10, 11, 14, 52, 26, 697, DateTimeKind.Unspecified),
                            Entity = "SalesOrderProductStatus",
                            EntityDescription = "Sales Order Product lines  Status",
                            EntityName = "SalesOrderProductStatusBase",
                            EntityStatus = "Active",
                            EntityType = "Table",
                            SystemAdminId = 1
                        });
                });

            modelBuilder.Entity("Products.Domain.DataModels.Organization.OrganizationBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Active")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("OAuthKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(8000);

                    b.Property<string>("OrganizationName")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SystemAdminId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OrganizationBase");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = 1,
                            DateCreated = new DateTime(2020, 10, 11, 17, 39, 54, 463, DateTimeKind.Unspecified),
                            OAuthKey = "0xDC331C344414C71865960FB46413F1C1803565A2E8021AEC52A73B0688903FBB",
                            OrganizationName = "biznex",
                            SystemAdminId = 1
                        });
                });

            modelBuilder.Entity("Products.Domain.DataModels.Product.ProductBase", b =>
                {
                    b.Property<int>("OrganizationBaseId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSubCategoryBaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<decimal>("ProductNetPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("OrganizationBaseId", "ProductSubCategoryBaseId");

                    b.HasIndex("ProductSubCategoryBaseId");

                    b.ToTable("ProductBase");
                });

            modelBuilder.Entity("Products.Domain.DataModels.Product.ProductCategoryBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CategoryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("ProductCategoryBase");
                });

            modelBuilder.Entity("Products.Domain.DataModels.Product.ProductCategoryLink", b =>
                {
                    b.Property<int>("OrganizationBaseId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductCategoryBaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("ProductSubCategoryBaseId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("OrganizationBaseId", "ProductCategoryBaseId");

                    b.HasIndex("ProductCategoryBaseId");

                    b.HasIndex("ProductSubCategoryBaseId");

                    b.ToTable("ProductCategoryLink");
                });

            modelBuilder.Entity("Products.Domain.DataModels.Product.ProductSubCategoryBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SubCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("SubCategoryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("ProductSubCategoryBase");
                });

            modelBuilder.Entity("Products.Domain.DataModels.Sales.SalesOrderBase", b =>
                {
                    b.Property<int>("OrganizationBaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerBaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationBaseId1")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("SalesOrderDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SalesOrderStatusBaseId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationBaseId");

                    b.HasIndex("CustomerBaseId");

                    b.HasIndex("OrganizationBaseId1");

                    b.HasIndex("SalesOrderStatusBaseId");

                    b.ToTable("SalesOrderBase");
                });

            modelBuilder.Entity("Products.Domain.DataModels.Sales.SalesOrderProductBase", b =>
                {
                    b.Property<int>("OrganizationBaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("NetPrice")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationBaseId1")
                        .HasColumnType("int");

                    b.Property<int?>("ProductBaseId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SalesOrderProductStatusBaseId")
                        .HasColumnType("int");

                    b.HasKey("OrganizationBaseId");

                    b.HasIndex("OrganizationBaseId1");

                    b.HasIndex("SalesOrderProductStatusBaseId");

                    b.ToTable("SalesOrderProductBase");
                });

            modelBuilder.Entity("Products.Domain.DataModels.Sales.SalesOrderProductStatusBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SalesOrderProductStatus")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("SalesProductStatusSequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SalesOrderProductStatusBase");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2020, 10, 11, 18, 6, 43, 0, DateTimeKind.Unspecified),
                            SalesOrderProductStatus = "Booked",
                            SalesProductStatusSequence = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2020, 10, 11, 18, 6, 48, 500, DateTimeKind.Unspecified),
                            SalesOrderProductStatus = "Dispatched",
                            SalesProductStatusSequence = 2
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2020, 10, 11, 18, 6, 48, 500, DateTimeKind.Unspecified),
                            SalesOrderProductStatus = "Delivered",
                            SalesProductStatusSequence = 3
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2020, 10, 11, 18, 6, 48, 500, DateTimeKind.Unspecified),
                            SalesOrderProductStatus = "Invoiced",
                            SalesProductStatusSequence = 4
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2020, 10, 11, 18, 6, 48, 500, DateTimeKind.Unspecified),
                            SalesOrderProductStatus = "Paid",
                            SalesProductStatusSequence = 5
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2020, 10, 11, 18, 6, 48, 500, DateTimeKind.Unspecified),
                            SalesOrderProductStatus = "Cancelled",
                            SalesProductStatusSequence = 6
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2020, 10, 11, 18, 6, 48, 500, DateTimeKind.Unspecified),
                            SalesOrderProductStatus = "Returned",
                            SalesProductStatusSequence = 7
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2020, 10, 11, 18, 6, 48, 500, DateTimeKind.Unspecified),
                            SalesOrderProductStatus = "Vendor Shipped",
                            SalesProductStatusSequence = 8
                        });
                });

            modelBuilder.Entity("Products.Domain.DataModels.Sales.SalesOrderStatusBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrganizationBaseId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SalesOrderStatus")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("SalesOrderStatusSequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationBaseId");

                    b.ToTable("SalesOrderStatusBase");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2020, 10, 11, 18, 6, 43, 0, DateTimeKind.Unspecified),
                            OrganizationBaseId = 1,
                            SalesOrderStatus = "Booked",
                            SalesOrderStatusSequence = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2020, 10, 11, 18, 6, 48, 500, DateTimeKind.Unspecified),
                            OrganizationBaseId = 1,
                            SalesOrderStatus = "Dispatched",
                            SalesOrderStatusSequence = 2
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2020, 10, 11, 18, 6, 48, 500, DateTimeKind.Unspecified),
                            OrganizationBaseId = 1,
                            SalesOrderStatus = "Delivered",
                            SalesOrderStatusSequence = 3
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2020, 10, 11, 18, 6, 48, 500, DateTimeKind.Unspecified),
                            OrganizationBaseId = 1,
                            SalesOrderStatus = "Invoiced",
                            SalesOrderStatusSequence = 4
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2020, 10, 11, 18, 6, 48, 500, DateTimeKind.Unspecified),
                            OrganizationBaseId = 1,
                            SalesOrderStatus = "Paid",
                            SalesOrderStatusSequence = 5
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2020, 10, 11, 18, 6, 48, 500, DateTimeKind.Unspecified),
                            OrganizationBaseId = 1,
                            SalesOrderStatus = "Cancelled",
                            SalesOrderStatusSequence = 6
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2020, 10, 11, 18, 6, 48, 500, DateTimeKind.Unspecified),
                            OrganizationBaseId = 1,
                            SalesOrderStatus = "Returned",
                            SalesOrderStatusSequence = 7
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2020, 10, 11, 18, 6, 48, 500, DateTimeKind.Unspecified),
                            OrganizationBaseId = 1,
                            SalesOrderStatus = "Partly Dispatched",
                            SalesOrderStatusSequence = 8
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2020, 10, 11, 18, 6, 48, 500, DateTimeKind.Unspecified),
                            OrganizationBaseId = 1,
                            SalesOrderStatus = "Partly Delivered",
                            SalesOrderStatusSequence = 8
                        });
                });

            modelBuilder.Entity("Products.Domain.DataModels.Users.UserBase", b =>
                {
                    b.Property<int>("OrganizationBaseId")
                        .HasColumnType("int");

                    b.Property<int>("UserRoleBaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UserLogin")
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("OrganizationBaseId", "UserRoleBaseId");

                    b.HasIndex("UserRoleBaseId");

                    b.ToTable("UserBase");
                });

            modelBuilder.Entity("Products.Domain.DataModels.Users.UserRoleBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SystemAdminId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserRoleBase");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2020, 10, 11, 17, 38, 5, 150, DateTimeKind.Unspecified),
                            Role = "Administrator",
                            SystemAdminId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2020, 10, 11, 17, 38, 15, 463, DateTimeKind.Unspecified),
                            Role = "Normal",
                            SystemAdminId = 1
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2020, 10, 11, 17, 38, 25, 680, DateTimeKind.Unspecified),
                            Role = "ProductOwner",
                            SystemAdminId = 1
                        });
                });

            modelBuilder.Entity("Products.Domain.DataModels.Address.AddressBase", b =>
                {
                    b.HasOne("Products.Domain.DataModels.Address.AddressTypeBase", "AddressTypeBase")
                        .WithMany()
                        .HasForeignKey("AddressTypeBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Products.Domain.DataModels.EntityBase", "EntityBase")
                        .WithMany()
                        .HasForeignKey("EntityBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Products.Domain.DataModels.Organization.OrganizationBase", "OrganizationBase")
                        .WithMany()
                        .HasForeignKey("OrganizationBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Products.Domain.DataModels.Customer.CustomerBase", b =>
                {
                    b.HasOne("Products.Domain.DataModels.Organization.OrganizationBase", "OrganizationBase")
                        .WithMany()
                        .HasForeignKey("OrganizationBaseId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Products.Domain.DataModels.Product.ProductBase", b =>
                {
                    b.HasOne("Products.Domain.DataModels.Organization.OrganizationBase", "OrganizationBase")
                        .WithMany()
                        .HasForeignKey("OrganizationBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Products.Domain.DataModels.Product.ProductSubCategoryBase", "ProductSubCategoryBase")
                        .WithMany()
                        .HasForeignKey("ProductSubCategoryBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Products.Domain.DataModels.Product.ProductCategoryLink", b =>
                {
                    b.HasOne("Products.Domain.DataModels.Organization.OrganizationBase", "OrganizationBase")
                        .WithMany()
                        .HasForeignKey("OrganizationBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Products.Domain.DataModels.Product.ProductCategoryBase", "ProductCategoryBase")
                        .WithMany()
                        .HasForeignKey("ProductCategoryBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Products.Domain.DataModels.Product.ProductSubCategoryBase", "ProductSubCategoryBase")
                        .WithMany()
                        .HasForeignKey("ProductSubCategoryBaseId");
                });

            modelBuilder.Entity("Products.Domain.DataModels.Sales.SalesOrderBase", b =>
                {
                    b.HasOne("Products.Domain.DataModels.Customer.CustomerBase", "CustomerBase")
                        .WithMany()
                        .HasForeignKey("CustomerBaseId");

                    b.HasOne("Products.Domain.DataModels.Organization.OrganizationBase", "OrganizationBase")
                        .WithMany()
                        .HasForeignKey("OrganizationBaseId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Products.Domain.DataModels.Sales.SalesOrderStatusBase", "SalesOrderStatusBase")
                        .WithMany()
                        .HasForeignKey("SalesOrderStatusBaseId");
                });

            modelBuilder.Entity("Products.Domain.DataModels.Sales.SalesOrderProductBase", b =>
                {
                    b.HasOne("Products.Domain.DataModels.Organization.OrganizationBase", "OrganizationBase")
                        .WithMany()
                        .HasForeignKey("OrganizationBaseId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Products.Domain.DataModels.Sales.SalesOrderProductStatusBase", "SalesOrderProductStatusBase")
                        .WithMany()
                        .HasForeignKey("SalesOrderProductStatusBaseId");
                });

            modelBuilder.Entity("Products.Domain.DataModels.Sales.SalesOrderStatusBase", b =>
                {
                    b.HasOne("Products.Domain.DataModels.Organization.OrganizationBase", "OrganizationBase")
                        .WithMany()
                        .HasForeignKey("OrganizationBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Products.Domain.DataModels.Users.UserBase", b =>
                {
                    b.HasOne("Products.Domain.DataModels.Organization.OrganizationBase", "OrganizationBase")
                        .WithMany()
                        .HasForeignKey("OrganizationBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Products.Domain.DataModels.Users.UserRoleBase", "UserRoleBase")
                        .WithMany()
                        .HasForeignKey("UserRoleBaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
